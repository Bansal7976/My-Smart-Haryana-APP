"""
AI Image Detection Service
Detects if an uploaded image is AI-generated and rejects it
"""

import cv2
import numpy as np
from PIL import Image
from PIL.ExifTags import TAGS
import io
from fastapi import HTTPException, status
import logging

logger = logging.getLogger(__name__)


def check_image_authenticity(image_bytes: bytes, filename: str) -> bool:
    """
    Check if image is authentic (not AI-generated).
    
    Uses multiple techniques:
    1. EXIF data analysis
    2. Noise pattern analysis
    3. Compression artifacts detection
    
    Args:
        image_bytes: Raw image bytes
        filename: Original filename
        
    Returns:
        bool: True if authentic, raises HTTPException if AI-generated
    """
    
    try:
        # Load image
        image = Image.open(io.BytesIO(image_bytes))
        img_array = np.array(image)
        
        # Check 1: EXIF Metadata Analysis
        is_suspicious_exif = _check_exif_data(image, filename)
        
        # Check 2: Noise Pattern Analysis
        is_suspicious_noise = _check_noise_patterns(img_array)
        
        # Check 3: Compression Artifacts
        is_suspicious_compression = _check_compression_artifacts(img_array)
        
        # Decision logic
        suspicion_score = sum([
            is_suspicious_exif * 3,      # EXIF is most reliable
            is_suspicious_noise * 2,     # Noise patterns are good indicators
            is_suspicious_compression * 1 # Compression is least reliable
        ])
        
        # Threshold: If suspicion score >= 4, likely AI-generated
        if suspicion_score >= 4:
            logger.warning(f"AI-generated image detected: {filename} (score: {suspicion_score})")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="AI-generated images are not allowed. Please upload a real photo taken with your camera."
            )
        
        logger.info(f"Image verified as authentic: {filename} (score: {suspicion_score})")
        return True
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Image verification error: {str(e)}")
        # If verification fails, allow image (fail-open for better UX)
        # In strict mode, you could fail-closed instead
        return True


def _check_exif_data(image: Image.Image, filename: str) -> bool:
    """
    Check EXIF data for signs of AI generation.
    
    AI-generated images often:
    - Lack camera information
    - Have suspicious software tags
    - Missing GPS data
    - No timestamp
    """
    
    try:
        exif_data = image._getexif()
        
        if not exif_data:
            # No EXIF data is suspicious for a camera photo
            logger.debug(f"No EXIF data found in {filename}")
            return True
        
        # Extract EXIF tags
        exif = {
            TAGS.get(tag): value
            for tag, value in exif_data.items()
            if tag in TAGS
        }
        
        # Suspicious software tags (common AI generators)
        ai_software_keywords = [
            'stable diffusion', 'midjourney', 'dall-e', 'dalle',
            'generated', 'ai', 'artificial', 'synthetic',
            'photoshop', 'gimp', 'generated by'
        ]
        
        software = str(exif.get('Software', '')).lower()
        for keyword in ai_software_keywords:
            if keyword in software:
                logger.warning(f"AI software detected in EXIF: {software}")
                return True
        
        # Check for camera make/model (real photos have this)
        has_camera_info = (
            exif.get('Make') or 
            exif.get('Model') or
            exif.get('LensMake')
        )
        
        if not has_camera_info:
            logger.debug(f"No camera information in EXIF for {filename}")
            return True
        
        return False
        
    except Exception as e:
        logger.debug(f"EXIF check error: {str(e)}")
        return False


def _check_noise_patterns(img_array: np.ndarray) -> bool:
    """
    Analyze noise patterns to detect AI generation.
    
    Real photos have natural sensor noise.
    AI-generated images have unnaturally smooth/perfect noise.
    """
    
    try:
        # Convert to grayscale if needed
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array
        
        # Calculate noise level using Laplacian variance
        laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
        
        # AI images often have very low or very high variance
        # Real photos typically have moderate variance (50-500)
        if laplacian_var < 10 or laplacian_var > 1000:
            logger.debug(f"Suspicious noise variance: {laplacian_var}")
            return True
        
        # Check for unnatural smoothness in edges
        edges = cv2.Canny(gray, 50, 150)
        edge_density = np.sum(edges > 0) / edges.size
        
        # AI images often have either too perfect or too messy edges
        if edge_density < 0.01 or edge_density > 0.3:
            logger.debug(f"Suspicious edge density: {edge_density}")
            return True
        
        return False
        
    except Exception as e:
        logger.debug(f"Noise pattern check error: {str(e)}")
        return False


def _check_compression_artifacts(img_array: np.ndarray) -> bool:
    """
    Check compression artifacts.
    
    Real photos from cameras have natural JPEG compression.
    AI images may have different compression patterns.
    """
    
    try:
        # Convert to grayscale
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array
        
        # Calculate frequency domain characteristics
        dft = cv2.dft(np.float32(gray), flags=cv2.DFT_COMPLEX_OUTPUT)
        dft_shift = np.fft.fftshift(dft)
        magnitude_spectrum = 20 * np.log(cv2.magnitude(dft_shift[:,:,0], dft_shift[:,:,1]) + 1)
        
        # Check for unnatural frequency patterns
        # Real photos have more natural frequency distribution
        high_freq_ratio = np.mean(magnitude_spectrum > np.median(magnitude_spectrum))
        
        if high_freq_ratio < 0.3 or high_freq_ratio > 0.7:
            logger.debug(f"Suspicious frequency distribution: {high_freq_ratio}")
            return True
        
        return False
        
    except Exception as e:
        logger.debug(f"Compression artifact check error: {str(e)}")
        return False


def validate_image_is_real(image_bytes: bytes, filename: str) -> None:
    """
    Main validation function to be called before saving images.
    Raises HTTPException if image is AI-generated.
    
    Args:
        image_bytes: Raw image bytes
        filename: Original filename
        
    Raises:
        HTTPException: If image is detected as AI-generated
    """
    check_image_authenticity(image_bytes, filename)

